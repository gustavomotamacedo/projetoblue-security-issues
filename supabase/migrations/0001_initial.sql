-- 0. ENUM TYPES

-- Enum: asset_status_enum
CREATE TYPE public.asset_status_enum AS ENUM (
  'Disponível',
  'Alugado',
  'Assinatura',
  'Sem Dados',
  'Bloqueado',
  'Manutenção'
);

-- Enum: asset_type_enum
CREATE TYPE public.asset_type_enum AS ENUM (
  'chip',
  'roteador'
);

-- Enum: solution_type_enum
CREATE TYPE public.solution_type_enum AS ENUM (
  'SPEEDY 5G',
  '4BLACK',
  '4LITE',
  '4PLUS',
  'AP BLUE',
  'POWERBANK',
  'SWITCH',
  'HUB USB',
  'ANTENA',
  'LOAD BALANCE',
  'LIVE'
);

-- Enum: user_role_enum
CREATE TYPE public.user_role_enum AS ENUM (
  'admin',
  'suporte',
  'cliente',
  'user'
);

-- Enum: association_type_enum
CREATE TYPE public.association_type_enum AS ENUM (
  'aluguel',
  'assinatura'
);

-- 1. TABELAS BASE QUE SÃO REFERENCIADAS POR OUTRAS

create table public.association_types (
  id bigint generated by default as identity not null,
  type text not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  constraint association_types_pkey primary key (id),
  constraint association_types_type_key unique (type)
) TABLESPACE pg_default;

create table public.asset_status (
  id bigint generated by default as identity not null,
  status text not null,
  association bigint null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  constraint status_pkey primary key (id),
  constraint status_id_key unique (id),
  constraint status_status_key unique (status),
  constraint status_association_fkey foreign KEY (association) references association_types (id) on update CASCADE on delete set null
) TABLESPACE pg_default;

create table public.asset_solutions (
  id bigint generated by default as identity not null,
  solution text not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  constraint solution_types_pkey primary key (id),
  constraint solution_types_solution_key unique (solution)
) TABLESPACE pg_default;

create table public.manufacturers (
  name text not null,
  description text null default ''::text,
  website text null,
  country text null,
  created_at timestamp with time zone not null,
  updated_at timestamp with time zone null default now(),
  id bigint generated by default as identity not null,
  deleted_at timestamp with time zone null,
  constraint manufacturers_pkey primary key (id)
) TABLESPACE pg_default;

create table public.plans (
  id bigserial not null,
  nome text not null,
  tamanho_gb bigint null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  constraint pacotes_pkey primary key (id)
) TABLESPACE pg_default;

create table public.clients (
  uuid text not null default gen_random_uuid (),
  nome text not null,
  cnpj text null,
  contato bigint not null,
  email text null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  empresa text not null,
  responsavel text not null,
  telefones jsonb null default '[]'::jsonb,
  constraint clients_pkey primary key (uuid),
  constraint clients_contato_key unique (contato),
  constraint clients_email_key unique (email),
  constraint clients_nome_key unique (nome),
  constraint check_telefones_array check ((jsonb_typeof(telefones) = 'array'::text)),
  constraint email_format_check check (
    (
      email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text
    )
  )
) TABLESPACE pg_default;

-- 2. TABELAS QUE USAM AS ANTERIORES COMO FOREIGN KEY

create table public.assets (
  uuid text not null default gen_random_uuid (),
  serial_number text null,
  line_number bigint null,
  iccid text null,
  model text null,
  rented_days bigint not null default '0'::bigint,
  radio text null,
  manufacturer_id bigint null,
  status_id bigint null,
  solution_id bigint null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  admin_user text not null default 'admin'::text,
  admin_pass text not null default ''::text,
  plan_id bigint null,
  ssid_fabrica text null,
  pass_fabrica text null,
  admin_user_fabrica text null,
  admin_pass_fabrica text null,
  ssid_atual text null,
  pass_atual text null,
  constraint assets_pkey primary key (uuid),
  constraint assets_iccid_key unique (iccid),
  constraint assets_serial_number_key unique (serial_number),
  constraint fk_assets_status foreign KEY (status_id) references asset_status (id),
  constraint assets_manufacturer_id_fkey foreign KEY (manufacturer_id) references manufacturers (id) on update CASCADE on delete set null,
  constraint assets_plan_id_fkey foreign KEY (plan_id) references plans (id) on update CASCADE on delete CASCADE,
  constraint fk_assets_solutions foreign KEY (solution_id) references asset_solutions (id),
  constraint assets_iccid_check check ((iccid ~ '^\d{19,20}$'::text)),
  constraint chk_assets_rented_days_positive check ((rented_days >= 0))
) TABLESPACE pg_default;

create table public.asset_client_assoc (
  id bigserial not null,
  asset_id text not null,
  client_id text not null,
  entry_date date not null,
  exit_date date null,
  association_id bigint not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  plan_id bigint null,
  gb bigint null default '0'::bigint,
  notes text null,
  ssid text null,
  pass text null,
  constraint asset_client_assoc_pkey primary key (id),
  constraint asset_client_assoc_asset_id_fkey foreign KEY (asset_id) references assets (uuid) on update CASCADE on delete CASCADE,
  constraint asset_client_assoc_client_id_fkey foreign KEY (client_id) references clients (uuid) on update CASCADE on delete CASCADE,
  constraint asset_client_assoc_plan_id_fkey foreign KEY (plan_id) references plans (id) on update CASCADE on delete CASCADE,
  constraint fk_assoc_association_type foreign KEY (association_id) references association_types (id)
) TABLESPACE pg_default;

create table public.asset_logs (
  id bigserial not null,
  assoc_id bigint null,
  date timestamp with time zone null,
  event text null,
  details jsonb null,
  status_before_id bigint null,
  status_after_id bigint null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  constraint asset_history_pkey primary key (id),
  constraint fk_asset_history_status_after foreign KEY (status_after_id) references asset_status (id),
  constraint fk_asset_history_status_before foreign KEY (status_before_id) references asset_status (id),
  constraint fk_asset_logs_assoc_id foreign KEY (assoc_id) references asset_client_assoc (id) on delete set null,
  constraint fk_asset_logs_status_after foreign KEY (status_after_id) references asset_status (id),
  constraint fk_asset_logs_status_before foreign KEY (status_before_id) references asset_status (id)
) TABLESPACE pg_default;

create table public.location_types (
  id serial not null,
  name text not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  constraint location_types_pkey primary key (id),
  constraint location_types_name_key unique (name)
) TABLESPACE pg_default;

create table public.locations (
  id serial not null,
  name text not null,
  client_id text null,
  latitude numeric(9, 6) null,
  longitude numeric(9, 6) null,
  created_at timestamp with time zone null default now(),
  type_id integer null,
  updated_at timestamp with time zone null default now(),
  deleted_at timestamp with time zone null,
  constraint locations_pkey primary key (id),
  constraint locations_client_id_fkey foreign KEY (client_id) references clients (uuid) on update CASCADE on delete set null,
  constraint locations_type_id_fkey foreign KEY (type_id) references location_types (id)
) TABLESPACE pg_default;

create table public.client_logs (
  id uuid not null default gen_random_uuid (),
  client_id text not null,
  event_type text not null,
  details jsonb null,
  performed_by uuid null,
  performed_by_email text null,
  date timestamp with time zone not null default now(),
  old_data jsonb null,
  new_data jsonb null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint client_logs_pkey primary key (id)
) TABLESPACE pg_default;

create table public.operation_locks (
  id uuid not null default gen_random_uuid (),
  operation_type text not null,
  resource_id text not null,
  user_id uuid null,
  acquired_at timestamp with time zone not null default now(),
  expires_at timestamp with time zone not null default (now() + '00:05:00'::interval),
  operation_data jsonb null,
  created_at timestamp with time zone not null default now(),
  constraint operation_locks_pkey primary key (id),
  constraint operation_locks_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create table public.profile_logs (
  id uuid not null default gen_random_uuid (),
  changed_at timestamp with time zone not null default now(),
  user_id uuid null,
  email text null,
  operation text not null,
  table_name text not null,
  old_data jsonb null,
  new_data jsonb null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  constraint profile_logs_pkey primary key (id),
  constraint profile_logs_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint profile_logs_operation_check check (
    (
      operation = any (
        array['INSERT'::text, 'UPDATE'::text, 'DELETE'::text]
      )
    )
  )
) TABLESPACE pg_default;

create table public.profiles (
  id uuid not null,
  email text not null,
  role public.user_role_enum not null default 'cliente'::user_role_enum,
  created_at timestamp with time zone not null default now(),
  bits_referral_code text null,
  is_active boolean null default true,
  is_approved boolean null default true,
  last_login timestamp with time zone null,
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp with time zone null,
  username text not null,
  constraint profiles_pkey primary key (id),
  constraint profiles_bits_referral_code_key unique (bits_referral_code),
  constraint profiles_email_key unique (email),
  constraint profiles_username_key unique (username),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

-- 3. ÍNDICES

create index IF not exists asset_client_assoc_asset_id_idx on public.asset_client_assoc using btree (asset_id) TABLESPACE pg_default;
create index IF not exists asset_client_assoc_client_id_idx on public.asset_client_assoc using btree (client_id) TABLESPACE pg_default;
create index IF not exists idx_asset_client_assoc_exit_date on public.asset_client_assoc using btree (exit_date) TABLESPACE pg_default;
create index IF not exists asset_history_assoc_id_index on public.asset_logs using btree (assoc_id) TABLESPACE pg_default;
create unique INDEX IF not exists idx_assets_radio_unique_not_null on public.assets using btree (radio) TABLESPACE pg_default where (radio is not null);
create index IF not exists idx_client_logs_client_id on public.client_logs using btree (client_id) TABLESPACE pg_default;
create index IF not exists idx_client_logs_date on public.client_logs using btree (date desc) TABLESPACE pg_default;
create index IF not exists idx_client_logs_event_type on public.client_logs using btree (event_type) TABLESPACE pg_default;
create index IF not exists idx_operation_locks_resource on public.operation_locks using btree (resource_id, operation_type) TABLESPACE pg_default;
create index IF not exists idx_operation_locks_expires on public.operation_locks using btree (expires_at) TABLESPACE pg_default;
create index IF not exists profile_logs_user_id_idx on public.profile_logs using btree (user_id) TABLESPACE pg_default;
create index IF not exists profile_logs_email_idx on public.profile_logs using btree (email) TABLESPACE pg_default;
create index IF not exists profile_logs_operation_idx on public.profile_logs using btree (operation) TABLESPACE pg_default;
create index IF not exists profiles_email_idx on public.profiles using btree (email) TABLESPACE pg_default;
create index IF not exists profiles_role_idx on public.profiles using btree (role) TABLESPACE pg_default;
create index IF not exists profiles_role_active_idx on public.profiles using btree (role, is_active) TABLESPACE pg_default;
