
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import {
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
} from './config';

// TEMPORARY SOLUTION:
// We're using direct Supabase access as a hotfix while the BLUE API (api.blue.legal) is unavailable.
// This approach maintains the same interface for components but changes the implementation.
// The long-term plan is to revert to using the API once it's available again.
// An issue should be created to track this temporary solution and plan the transition back.


// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
  global: {
    fetch: (input, init) => {
      // Add custom fetch logic for better request error handling
      return fetch(input, init).catch(err => {
        if (import.meta.env.DEV) console.error('Network error during Supabase request:', err);
        throw err;
      });
    },
  },
});

// Add a convenience method to check if we have a valid session
export const hasValidSession = async (): Promise<boolean> => {
  try {
    const { data, error } = await supabase.auth.getSession();
    return !error && !!data.session;
  } catch (err) {
    if (import.meta.env.DEV) console.error('Error checking session:', err);
    return false;
  }
};
